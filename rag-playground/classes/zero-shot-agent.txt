verbose=True tags=['zero-shot-react-description'] agent=ZeroShotAgent(llm_chain=LLMChain(prompt=PromptTemplate(input_variables=['agent_scratchpad', 
'input'], 

template='Answer the following questions as best you can. You have access to the following tools:
my_calculator: Useful for when you need to answer questions about math.
Language Model: use this tool for general purpose queries and logic
turn_lights_on: Use this tool when you need to turns the lights on for a given lightId
turn_lights_off: Use this tool when you need to turns the lights off for a given lightId
Use the following format:
Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, 
should be one of [my_calculator, 
Language Model, 
turn_lights_on, 
turn_lights_off]
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question
Begin!
Question: {input}
Thought:{agent_scratchpad}'), 
llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x11fe5b890>, 
async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x11fe59a50>, 
temperature=0.0, 
openai_api_key=SecretStr('**********'), 
openai_proxy='')), 
output_parser=MRKLOutputParser(), 
allowed_tools=['my_calculator', 
'Language Model', 
'turn_lights_on', 
'turn_lights_off']) tools=[Tool(name='my_calculator', 
description='Useful for when you need to answer questions about math.', 
handle_tool_error=True, 
func=<bound method Chain.run of LLMMathChain(llm_chain=LLMChain(prompt=PromptTemplate(input_variables=['question'], 
template='Translate a math problem into a expression that can be executed using Python\'s numexpr library. Use the output of running this code to answer the question.
Question: ${{Question with math problem.}}
```text
${{single line mathematical expression that solves the problem}}
```
...numexpr.evaluate(text)...
```output
${{Output of running the code}}
```
Answer: ${{Answer}}
Begin.
Question: What is 37593 * 67?
```text
37593 * 67
```
...numexpr.evaluate("37593 * 67")...
```output
2518731
```
Answer: 2518731
Question: 37593^(1/5)
```text
37593**(1/5)
```
...numexpr.evaluate("37593**(1/5)")...
```output
8.222831614237718
```
Answer: 8.222831614237718
Question: {question}
'), 
llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x11fe5b890>, 
async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x11fe59a50>, 
temperature=0.0, 
openai_api_key=SecretStr('**********'), 
openai_proxy='')), 
llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x11fe5b890>, 
async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x11fe59a50>, 
temperature=0.0, 
openai_api_key=SecretStr('**********'), 
openai_proxy=''))>), 
Tool(name='Language Model', 
description='use this tool for general purpose queries and logic', 
handle_tool_error=True, 
func=<bound method Chain.run of LLMChain(prompt=PromptTemplate(input_variables=['query'], 
template='{query}'), 
llm=ChatOpenAI(client=<openai.resources.chat.completions.Completions object at 0x11fe5b890>, 
async_client=<openai.resources.chat.completions.AsyncCompletions object at 0x11fe59a50>, 
temperature=0.0, 
openai_api_key=SecretStr('**********'), 
openai_proxy=''))>), 
Tool(name='turn_lights_on', 
description='Use this tool when you need to turns the lights on for a given lightId', 
handle_tool_error=True, 
func=StructuredTool(name='turn_lights_on', 
description='turn_lights_on(lightId: str) -> str - Use this tool when you need to turns the lights on for a given lightId', 
args_schema=<class 'pydantic.v1.main.turn_lights_onSchema'>, 
func=<function CustomTool.turn_lights_on at 0x11fed8040>)), 
Tool(name='turn_lights_off', 
description='Use this tool when you need to turns the lights off for a given lightId', 
handle_tool_error=True, 
func=StructuredTool(name='turn_lights_off', 
description='turn_lights_off(lightId: str) -> str - Use this tool when you need to turns the lights off for a given lightId', 
args_schema=<class 'pydantic.v1.main.turn_lights_offSchema'>, 
func=<function CustomTool.turn_lights_off at 0x11fed80e0>))]